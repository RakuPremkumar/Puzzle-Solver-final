//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Puzlle_Solver.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Puzlle_Solver.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Box_line_reduction_1 {
            get {
                object obj = ResourceManager.GetObject("Box_line_reduction_1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Box_line_reduction_2 {
            get {
                object obj = ResourceManager.GetObject("Box_line_reduction_2", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Box line reduction occurs when a number only appears twice or three times in the same row or column, while also being a part of the same cage. If this does happen then you can remove that number as a possibility from other cells within the same cage that aren&apos;t in the original row or column. As shown on the left where the two 4s in cells (A,8) and (B,8) are the only 4s in column 8 and they are both in cage 3. this then means we can remove 4 as a possibility from cells (B,7), (B,9) and (C,9) because they are [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string BoxlineReductionExplanation {
            get {
                return ResourceManager.GetString("BoxlineReductionExplanation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Hidden_singles_1 {
            get {
                object obj = ResourceManager.GetObject("Hidden_singles_1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Hidden_singles_2 {
            get {
                object obj = ResourceManager.GetObject("Hidden_singles_2", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hidden singles occurs when a number is only able to appear once within a column, row or cage. This means that a number only has one cell in a column, row or cage that it can be put into. As shown on the left in cell D2 the 7 is only able to go into that cell for that same cage. Similarly the 7 in cell F6 is the only 7 that appears in that same row which means we can solve these 2 numbers as shown..
        /// </summary>
        internal static string HiddenSingleExplanation {
            get {
                return ResourceManager.GetString("HiddenSingleExplanation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Naked_Pairs_1 {
            get {
                object obj = ResourceManager.GetObject("Naked_Pairs_1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Naked_Pairs_2 {
            get {
                object obj = ResourceManager.GetObject("Naked_Pairs_2", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Naked pairs are when there are two cells that share the same numbers as possibilities and they each only have those two numbers as possibility and they share either a row column or cage. If this does occur then you can remove both those numbers as possibilities from other cells based on what unit they share together. This is shown on the left where the numbers 2 and 8 are they only numbers in cell (H,8) and (G,8) and they are in the same column,8. This means the 2 in cell (C,8) can be removed as a possibili [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string NakedPairExplanation {
            get {
                return ResourceManager.GetString("NakedPairExplanation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Pointing_pairs_1 {
            get {
                object obj = ResourceManager.GetObject("Pointing_pairs_1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Pointing_pairs_2 {
            get {
                object obj = ResourceManager.GetObject("Pointing_pairs_2", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pointing paris occurs when, in one cage a number only appears as a possibility two or three times and each apperence is in the same row or colmun. This means that you can eliminate that number as a possibilty from cells in the same row as the pairs or triple outside the initial cage. on the left it shows the number 2 in cells G4 and G5 as being the only 2s in cage 8 (highlighted in green). It then removes the 2 in cell G2 as a possibility(highlighted in yellow)..
        /// </summary>
        internal static string PointingPairsExplanation {
            get {
                return ResourceManager.GetString("PointingPairsExplanation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Solved_Cell_1 {
            get {
                object obj = ResourceManager.GetObject("Solved_Cell_1", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized resource of type System.Drawing.Bitmap.
        /// </summary>
        internal static System.Drawing.Bitmap Solved_cell_2 {
            get {
                object obj = ResourceManager.GetObject("Solved_cell_2", resourceCulture);
                return ((System.Drawing.Bitmap)(obj));
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Wherever there is only one possibility in a cell, we can solve this cell as only that one number is able to go in that cell. Shown by the cells A8 and J8 where they both only have one possibility each the 9 and the 6 respectively and we can now fill in the cell with that number as shown on the left..
        /// </summary>
        internal static string SolvedCellExplanation {
            get {
                return ResourceManager.GetString("SolvedCellExplanation", resourceCulture);
            }
        }
    }
}
